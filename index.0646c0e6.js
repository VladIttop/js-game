function _arrayLikeToArray(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,r=new Array(t);e<t;e++)r[e]=n[e];return r}function _arrayWithoutHoles(n){if(Array.isArray(n))return _arrayLikeToArray(n)}function _iterableToArray(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _toConsumableArray(n){return _arrayWithoutHoles(n)||_iterableToArray(n)||_unsupportedIterableToArray(n)||_nonIterableSpread()}function _unsupportedIterableToArray(n,t){if(n){if("string"==typeof n)return _arrayLikeToArray(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);return"Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e?Array.from(e):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?_arrayLikeToArray(n,t):void 0}}var scientists=[{name:"Albert",surname:"Einstein",born:1879,dead:1955,id:1},{name:"Isaac",surname:"Newton",born:1643,dead:1727,id:2},{name:"Galileo",surname:"Galilei",born:1564,dead:1642,id:3},{name:"Marie",surname:"Curie",born:1867,dead:1934,id:4},{name:"Johannes",surname:"Kepler",born:1571,dead:1630,id:5},{name:"Nicolaus",surname:"Copernicus",born:1473,dead:1543,id:6},{name:"Max",surname:"Planck",born:1858,dead:1947,id:7},{name:"Katherine",surname:"Blodgett",born:1898,dead:1979,id:8},{name:"Ada",surname:"Lovelace",born:1815,dead:1852,id:9},{name:"Sarah E.",surname:"Goode",born:1855,dead:1905,id:10},{name:"Lise",surname:"Meitner",born:1878,dead:1968,id:11},{name:"Hanna",surname:"Hammarström",born:1829,dead:1909,id:12}],prompts=["отримати масив вчених що народилися в 19 ст","Відсортувати вчених по алфавіту","Відсортувати вчених по кількості прожитих років","Знайти вченого який народився найпізніше.","Знайти рік народження Albert Einstein","знайти вчених прізвище яких починається на літеру С","Видалити з масива всіх вчених імя яких починається на A","Знайти вченого який прожив найбільше і вченого який прожив найменьше","Знайти вчених в яких співпадають перші літери імені і прізвища"],scientistsList=document.querySelector(".scientist-list");scientists.forEach((function(n){return scientistsList.innerHTML+='\n    <li class="scientist-list__item" data-id="'.concat(n.id,'">\n\n    </li>\n')}));var btnsList=document.querySelector(".facts-list");prompts.forEach((function(n,t){return btnsList.innerHTML+='\n    <li class="scientist__prompt">\n        <button class="facts-list__btn" data-promptNum="'.concat(t,'">').concat(n,"</button>\n    </li>\n")}));var showScientists=function(n){scientistsList.innerHTML="",Array.isArray(n)?n.forEach((function(n){return scientistsList.innerHTML+='\n          <li class="scientist-list__item showAnim" data-id="'.concat(n,'">\n              <p class="scientist__name">').concat(scientists.find((function(t){return t.id===n})).name," ").concat(scientists.find((function(t){return t.id===n})).surname,'</p>\n              <p class="scientist__lifeYears">').concat(scientists.find((function(t){return t.id===n})).born,"-").concat(scientists.find((function(t){return t.id===n})).dead," years</p>\n          </li>\n      ")})):scientistsList.innerHTML+='\n          <li class="scientist-list__item" data-id="'.concat(n,'">\n              <p class="scientist__name">').concat(n.name," ").concat(n.surname,'</p>\n              <p class="scientist__lifeYears">').concat(n.born,"-").concat(n.dead," years</p>\n          </li>\n      ")};btnsList.addEventListener("click",(function(n){switch(n.target.getAttribute("data-promptNum")){case"0":showScientists(scientists.filter((function(n){return n.born>1800&&n.born<=1900})).map((function(n){return n.id})));break;case"1":showScientists(scientists.sort((function(n,t){return n.name.localeCompare(t.name)})).map((function(n){return n.id})));break;case"2":showScientists(scientists.sort((function(n,t){return t.dead-t.born-(n.dead-n.born)})).map((function(n){return n.id})));break;case"3":showScientists(scientists.sort((function(n,t){return t.born-n.born}))[0]);break;case"4":showScientists(scientists.find((function(n){return"Albert"===n.name&&"Einstein"===n.surname})));break;case"5":showScientists(scientists.filter((function(n){return n.surname.startsWith("C")})).map((function(n){return n.id})));break;case"6":showScientists(scientists.filter((function(n){return!n.name.startsWith("A")})).map((function(n){return n.id})));break;case"7":var t,e;showScientists([(t=Math).max.apply(t,_toConsumableArray(scientists.map((function(n){return n.dead-n.born})))),(e=Math).min.apply(e,_toConsumableArray(scientists.map((function(n){return n.dead-n.born}))))].map((function(n){return scientists.find((function(t){return t.dead-t.born===n})).id})));break;case"8":showScientists(scientists.filter((function(n){return n.name[0]===n.surname[0]})).map((function(n){return n.id})))}}));
//# sourceMappingURL=index.0646c0e6.js.map
